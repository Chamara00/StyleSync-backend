// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = "postgres://admin:e4gAJaOREnf4eFGZgN2DYzqSu7b7zkY4@dpg-cnjdchuct0pc73ca8qq0-a.singapore-postgres.render.com/stylesync"
}

generator client {
  provider = "prisma-client-js"
}

model salon {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
  location   String?
  line1      String?
  line2      String?
  city       String?
  country    String?
  contactNo  String       @unique
  otp        String?
  review     review[]
  article    article[]
  salonStaff salonStaff[]
  openDays   openDays[]

  @@map("salon")
}

model openDays {
  salon     salon    @relation(fields: [salonId], references: [id])
  salonId   Int
  dayName   String
  isOpen    Boolean
  openHour  String?
  closeHour String?
  breaks    breaks[]

  @@id([salonId, dayName])
  @@map("openDays")
}

model breaks {
  openDays   openDays @relation(fields: [salonId, dayName], references: [salonId, dayName])
  salonId    Int
  dayName    String
  breakStart String
  breakEnd   String

  @@id([salonId, dayName, breakStart])
  @@map("breaks")
}

model customer {
  id        Int         @id @default(autoincrement())
  name      String
  gender    String
  password  String
  email     String      @unique
  //timeBlock timeBlocks[]
  appointment  appointment[]
  review    review[]

  @@map("customer")
}

model timeBlocks {
  id         Int      @id @default(autoincrement())
  date       DateTime
  //time       String
  StartTime   String
  EndTime     String
  IsBook     Boolean
  duration   Int
 // customerId Int
 //customer   customer @relation(fields: [customerId], references: [id])
  staffIdGet staff @relation(fields: [staffId], references: [id])
  staffId     Int
  serviceId  Int
  service    service  @relation(fields: [serviceId], references: [id])
  appointment  appointment[]

  @@map("timeBlocks")
}

model service {
  id           Int            @id @default(autoincrement())
  name         String
  serviceType  String
  price        Int
  duration     String
  timeBlock    timeBlocks[]
  serviceStaff serviceStaff[]

  @@map("service")
}

model review {
  id         Int      @id @default(autoincrement())
  time       String
  date       DateTime
  value      Float
  customerId Int
  customer   customer @relation(fields: [customerId], references: [id])
  salonId    Int
  salon      salon    @relation(fields: [salonId], references: [id])

  @@map("review")
}

model article {
  id      Int      @id @default(autoincrement())
  date    DateTime
  time    String
  salonId Int
  salon   salon    @relation(fields: [salonId], references: [id])

  @@map("article")
}

model staff {
  id           Int            @id @default(autoincrement())
  name         String
  gender       String
  // blockId      Int
  // timeBlocks    timeBlocks    @relation(fields: [blockId], references: [id])
  timeBlocks timeBlocks[]
  serviceStaff serviceStaff[]
  salonStaff   salonStaff[]
  staffContact staffContact[]

  @@map("staff")
}

model serviceStaff {
  // id        Int     @id @default(autoincrement())
  Service   service @relation(fields: [serviceId], references: [id])
  serviceId Int
  staffId   Int
  staff     staff   @relation(fields: [staffId], references: [id])

  @@id([serviceId, staffId])
  @@map("serviceStaff")
}

model salonStaff {
  // id      Int   @id @default(autoincrement())
  salonId Int
  salon   salon @relation(fields: [salonId], references: [id])
  staffID Int
  staff   staff @relation(fields: [staffID], references: [id])

  @@id([salonId, staffID])
  @@map("salonStaff")
}

model staffContact {
  //id        Int   @unique @id @default(autoincrement())
  staffId   Int
  staff     staff  @relation(fields: [staffId], references: [id])
  contactNo String @unique

  @@id([staffId, contactNo])
  @@map("staffContact")
}

model allServices {
  service     String
  serviceType String
  price       Int
  duration    String

  @@id([service])
  @@map("allServices")
}

model appointment{
  id          Int      @id @default(autoincrement())
  customerId  Int
  customer   customer @relation(fields: [customerId], references: [id])
  TimeBlockId Int
  timeBlocks  timeBlocks @relation(fields: [TimeBlockId], references: [id])
  isCancle  Boolean

  @@map("appointment")
}
