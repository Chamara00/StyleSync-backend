// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = "postgres://admin:Nuirrrj7DyL6oygH0Qx4yVAn8UAOn8xU@dpg-co1ggc21hbls738fqon0-a.singapore-postgres.render.com/stylesync_db_p7st"
}

generator client {
  provider = "prisma-client-js"
}

model salon {
  id            Int          @id @default(autoincrement())
  name          String
  email         String       @unique
  location      String?
  line1         String?
  line2         String?
  city          String?
  country       String?
  contactNo     String       @unique
  otp           String?
  emailVerified Boolean?
  review        review[]
  article       article[]
  salonStaff    salonStaff[]

  @@map("salon")
}

model openDays {
  staff     staff    @relation(fields: [staffId], references: [id])
  staffId   Int
  dayName   String
  isOpen    Boolean
  openHour  String?
  closeHour String?
  breaks    breaks[]

  @@id([staffId, dayName])
  @@map("openDays")
}

model breaks {
  openDays   openDays @relation(fields: [staffId, dayName], references: [staffId, dayName])
  staffId    Int
  dayName    String
  breakStart String
  breakEnd   String

  @@id([staffId, dayName, breakStart])
  @@map("breaks")
}

model customer {
  id          Int           @id @default(autoincrement())
  name        String
  gender      String
  password    String?
  email       String        @unique
  //timeBlock timeBlocks[]
  review      review[]
  customerAppointmentBlock customerAppointmentBlock[]


  @@map("customer")
}

model timeBlocks {
  startTime   String
  endTime     String
  dayName String
  staff       staff    @relation(fields: [staffId], references: [id])
  staffId     Int

@@id([staffId,startTime,dayName])
  @@map("timeBlocks")
}

model appointmentBlock{
  date DateTime
  startTime String
  endTime String
  staff       staff    @relation(fields: [staffId], references: [id])
  staffId Int
  isBook Boolean
  customerAppointmentBlock customerAppointmentBlock[]
  serviceAppointmentBlock serviceAppointmentBlock[]

  @@id([date, startTime,staffId])
  @@map("appointmentBlock")
}

model service {
  id           Int            @id @default(autoincrement())
  name         String
  serviceType  String
  price        Int
  duration     String
  serviceStaff serviceStaff[]
  serviceAppointmentBlock serviceAppointmentBlock[]

  @@map("service")
}

model review {
  id         Int      @id @default(autoincrement())
  time       String
  date       DateTime
  value      Float
  customerId Int
  customer   customer @relation(fields: [customerId], references: [id])
  salonId    Int
  salon      salon    @relation(fields: [salonId], references: [id])

  @@map("review")
}

model article {
  id      Int      @id @default(autoincrement())
  date    DateTime
  time    String
  salonId Int
  salon   salon    @relation(fields: [salonId], references: [id])

  @@map("article")
}

model staff {
  id           Int            @id @default(autoincrement())
  name         String
  gender       String
  // blockId      Int
  // timeBlocks    timeBlocks    @relation(fields: [blockId], references: [id])
  serviceStaff serviceStaff[]
  salonStaff   salonStaff[]
  staffContact staffContact[]
  timeBlocks timeBlocks[]
  appointmentBlock appointmentBlock[]
  openDays      openDays[]

  @@map("staff")
}

model serviceStaff {
  // id        Int     @id @default(autoincrement())
  Service   service @relation(fields: [serviceId], references: [id])
  serviceId Int
  staffId   Int
  staff     staff   @relation(fields: [staffId], references: [id])

  @@id([serviceId, staffId])
  @@map("serviceStaff")
}

model salonStaff {
  // id      Int   @id @default(autoincrement())
  salonId Int
  salon   salon @relation(fields: [salonId], references: [id])
  staffID Int
  staff   staff @relation(fields: [staffID], references: [id])

  @@id([salonId, staffID])
  @@map("salonStaff")
}

model staffContact {
  //id        Int   @unique @id @default(autoincrement())
  staffId   Int
  staff     staff  @relation(fields: [staffId], references: [id])
  contactNo String @unique

  @@id([staffId, contactNo])
  @@map("staffContact")
}

model allServices {
  service     String
  serviceType String
  price       Int
  duration    String

  @@id([service])
  @@map("allServices")
}

model customerAppointmentBlock{
  customer customer @relation(fields:[customerId], references:[id])
  customerId Int
  appointmentBlock appointmentBlock @relation(fields: [date,startTime,staffId], references: [date,startTime,staffId])
  date        DateTime
  startTime String
  staffId Int
  isCancel Boolean

  @@id([customerId,date,startTime,staffId])
  @@map("customerAppointmentBlock")

}

model serviceAppointmentBlock{
  service service @relation(fields:[serviceId], references:[id])
  serviceId Int
  appointmentBlock appointmentBlock @relation(fields: [date,startTime,staffId], references: [date,startTime,staffId])
  date        DateTime
  startTime String
  staffId Int

  @@id([serviceId,date,startTime,staffId])
  @@map("serviceAppointmentBlock")
}
